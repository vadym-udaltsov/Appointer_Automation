AWSTemplateFormatVersion: 2010-09-09
Resources:
#Lambdas
  AdminLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          Ref: DeploymentBucket
        S3Key: !Join [ "", [ !Ref AdminLambdaArtifact, !Ref ArtifactSuff ] ]
      FunctionName:
        Ref: AdminLambdaName
      Handler: com.bot.lambda.AdminLambda::handleRequest
      Layers:
        - !Ref AdminLayer
      MemorySize: 1024
      Role: !GetAtt AdminLambdaRole.Arn
      SnapStart:
        ApplyOn: PublishedVersions
      Runtime: java11
      Timeout: 300
    DependsOn:
      - AdminLayer
  PostSignUpLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          Ref: DeploymentBucket
        S3Key: !Join [ "", [ !Ref PostSignUpArtifact, !Ref ArtifactSuff ] ]
      FunctionName:
        Ref: SignUpLambdaName
      Handler: com.bot.lambda.RegistrationLambda::handleRequest
      Layers:
        - !Ref AdminLayer
      MemorySize: 512
      Role: !GetAtt AdminLambdaRole.Arn
      Runtime: java11
      Timeout: 300
    DependsOn:
      - AdminLayer
#Lambda versions
  AdminLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: AdminLambdaName
    DependsOn:
      - AdminLambda
  AdminLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: AdminLambdaName
      FunctionVersion: !GetAtt AdminLambdaVersion.Version
      Name:
        Ref: AdminLambdaAliasName
    DependsOn:
      - AdminLambdaVersion
  AdminLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: admin_lambda_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'ssm:*'
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cognito-identity:*'
                  - 'cognito-idp:*'
                  - 'cognito-sync:*'
                  - 'iam:ListRoles'
                  - 'iam:ListOpenIdConnectProviders'
                  - 'iam:GetRole'
                  - 'iam:ListSAMLProviders'
                  - 'iam:GetSAMLProvider'
                  - 'kinesis:ListStreams'
                  - 'lambda:GetPolicy'
                  - 'lambda:ListFunctions'
                  - 'sns:GetSMSSandboxAccountStatus'
                  - 'sns:ListPlatformApplications'
                  - 'ses:ListIdentities'
                  - 'ses:GetIdentityVerificationAttributes'
                  - 'ses:VerifyEmailIdentity'
                  - 'ses:VerifyDomainDkim'
                  - 'ses:VerifyDomainIdentity'
                  - 'mobiletargeting:GetApps'
                  - 'acm:ListCertificates'
                Resource: '*'
#Lambda permissions
  PostSignUpLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SignUpLambdaName
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join [ "", [ "arn:aws:cognito-idp:", !Ref Region, ":", !Ref AccountId, ":userpool/", !Ref UserPool ] ]
    DependsOn:
      - UserPool
#Layer
  AdminLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      CompatibleRuntimes:
        - java11
      Content:
        S3Bucket:
          Ref: DeploymentBucket
        S3Key:
          Ref: LayerFileName
      Description: Bot lambdas 3rd party dependencies.
      LayerName:
        Ref: LayerName
#S3 buckets
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref UiBucketName
      WebsiteConfiguration:
        IndexDocument: login.html
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedMethods:
              - GET
            MaxAge: 3000
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${StaticWebsiteBucket}/*'
#DynamoDbTables
  CustomerTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: customer
#Api Gateway
  BotApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name:
        Ref: APIName
    DependsOn:
      - AdminLambdaAlias
  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId: !Ref BotApi
      Name: !Ref AuthorizerName
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.token
      ProviderARNs:
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
    DependsOn:
      - BotApi
#ApiResources
  AdminResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref BotApi
      ParentId: !GetAtt
        - BotApi
        - RootResourceId
      PathPart: admin
    DependsOn:
      - BotApi
  AuthResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref BotApi
      ParentId: !Ref AdminResource
      PathPart: auth
    DependsOn:
      - AdminResource
  CompanyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref BotApi
      ParentId: !Ref AdminResource
      PathPart: company
    DependsOn:
      - AdminResource
  EmailVerifyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref BotApi
      ParentId: !Ref AdminResource
      PathPart: email-verify
    DependsOn:
      - AdminResource
#Methods
  AuthPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref BotApi
      ResourceId: !Ref AuthResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 300
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ "arn:aws:apigateway:", !Ref Region, ":lambda:path/2015-03-31/functions/", !Ref AdminLambdaAlias, "/invocations" ] ]
    DependsOn:
      - AuthResource
  CompanyGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref BotApi
      ResourceId: !Ref CompanyResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 300
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ "arn:aws:apigateway:", !Ref Region, ":lambda:path/2015-03-31/functions/", !Ref AdminLambdaAlias, "/invocations" ] ]
    DependsOn:
      - CompanyResource
  EmailVerifyGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref BotApi
      ResourceId: !Ref EmailVerifyResource
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 300
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ "arn:aws:apigateway:", !Ref Region, ":lambda:path/2015-03-31/functions/", !Ref AdminLambdaAlias, "/invocations" ] ]
    DependsOn:
      - EmailVerifyResource
#Options
  AuthOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref BotApi
      ResourceId: !Ref AuthResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  CompanyGetOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref BotApi
      ResourceId: !Ref CompanyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  EmailVerifyOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref BotApi
      ResourceId: !Ref EmailVerifyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
#Deployment
  AdminDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref BotApi
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - BotApi
      - AuthPost
      - EmailVerifyGet
      - CompanyGet
#ApiGateway permission
  BotApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AdminLambdaAlias
      Principal: apigateway.amazonaws.com
    DependsOn:
      - AdminDeployment
#Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: !Ref VerifiedIdentityEmail
        SourceArn: !Join [ "", [ "arn:aws:ses:", !Ref Region, ":", !Ref AccountId, ":identity/", !Ref VerifiedIdentityEmail ] ]
      UsernameAttributes:
        - email
      LambdaConfig:
        PostConfirmation: !GetAtt PostSignUpLambda.Arn
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: true
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${UserPoolName}-client
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      CallbackURLs:
        - !Join [ "", [ "https://appointer-ui-", !Ref AccountId, ".s3.", !Ref Region, ".amazonaws.com/html/login.html" ] ]
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthScopes:
        - phone
        - email
        - openid
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join [ "", [ !Ref DomainName, "-", !Ref AccountId ] ]
      UserPoolId: !Ref UserPool
#SsmParameters
  UserPoolParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Ref PoolIdParamName
      Tier: Standard
      Type: String
      Value: !Ref UserPool
  ClientUserPoolParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Ref ClientPoolIdParamName
      Tier: Standard
      Type: String
      Value: !Ref UserPoolClient

Outputs:
  BotApiId:
    Value: !Ref BotApi
  UserPoolClientId:
    Value: !Ref UserPoolClient

Parameters:
  AdminLambdaName:
    Type: String
    Default: adminLambda
  SignUpLambdaName:
    Type: String
    Default: postSignUpLambda
  AdminLambdaAliasName:
    Type: String
    Default: adminLambdaAlias
  LayerName:
    Type: String
    Default: adminLayer
  LayerFileName:
    Type: String
    Default: bot-3d-layer.jar
  UiBucketName:
    Type: String
    Default: appointment-ui-bucket
  DeploymentBucket:
    Type: String
    Default: appointment-deployment-bucket
  LayerArtefact:
    Type: String
    Default: bot-3d-layer.jar
  AdminLambdaArtifact:
    Type: String
    Default: admin
  PostSignUpArtifact:
    Type: String
    Default: registration
  ArtifactSuff:
    Type: String
    Default: -0.0.1-SNAPSHOT.jar
  APIName:
    Type: String
    Default: appointer
  AuthorizerName:
    Type: String
    Default: appointerAuthorizer
  DomainName:
    Type: String
    Default: appointer
  UserPoolName:
    Type: String
    Default: AppointerUserPool
  PoolIdParamName:
    Type: String
    Default: user-pool-id
  ClientPoolIdParamName:
    Type: String
    Default: user-pool-client-id
  EnvironmentName:
    Type: String
    Default: dev
  Region:
    Type: String
    Default: eu-central-1
  AccountId:
    Type: String
    Default: 773974733061
  VerifiedIdentityEmail:
    Type: String
    Default: sergii.udaltsov@gmail.com